// Generated by CoffeeScript 1.8.0
(function() {
  var ImageConvertFormView, ImageConverter, chmodSync, platform, spawn,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var form;
    form = new ImageConvertFormView({
      logsElem: $("div.logs")
    });
    return form.render().$el.appendTo($("div.form"));
  });

  spawn = require("child_process").spawn;

  platform = require("os").platform;

  chmodSync = require("fs").chmodSync;

  ImageConverter = (function() {
    function ImageConverter(_arg) {
      this.source = _arg.source, this.log = _arg.log;
      this.source = this.source.split(";");
      switch (platform()) {
        case "darwin":
          this.pathToBin = "vendor/bin/osx/convert";
          this.profile = "vendor/bin/osx/JapanColor2011Coated.icc";
          break;
        case "win32":
          this.pathToBin = "vendor/bin/win32/convert.exe";
          this.profile = "vendor/bin/win32/JapanColor2011Coated.icc";
      }
      chmodSync(this.pathToBin, 755);
    }

    ImageConverter.prototype.process = function() {
      this.log("画像一括処理中です");
      return _.each(this.source, (function(_this) {
        return function(file, index) {
          _this.child = spawn(_this.pathToBin, [file, "-profile", _this.profile, "-colorspace", "cmyk", "/Users/hoyamada/Desktop/" + index + ".jpg"]);
          _this.child.stdout.on("data", function(data) {
            return _this.log("" + data);
          });
          _this.child.stderr.on("data", function(data) {
            return _this.log("ERROR: " + data);
          });
          return _this.child.on("exit", function(code) {
            return _this.log("画像一括処理が終了しました。");
          });
        };
      })(this));
    };

    return ImageConverter;

  })();

  ImageConvertFormView = (function(_super) {
    __extends(ImageConvertFormView, _super);

    function ImageConvertFormView() {
      return ImageConvertFormView.__super__.constructor.apply(this, arguments);
    }

    ImageConvertFormView.prototype.tagName = "form";

    ImageConvertFormView.prototype.events = {
      "submit": "onSubmit"
    };

    ImageConvertFormView.prototype.initialize = function(_arg) {
      this.logsElem = _arg.logsElem;
    };

    ImageConvertFormView.prototype.render = function() {
      this.$el.html("ファイル: <input class=\"file\" type=\"file\" multiple><br>\n<input type=\"submit\" value=\"変換処理実施\">");
      return this;
    };

    ImageConvertFormView.prototype.onSubmit = function(e) {
      var data;
      e.preventDefault();
      data = {
        source: this.$("input.file").val(),
        log: (function(_this) {
          return function(data) {
            return _this.logsElem.html("" + (_this.logsElem.html()) + "<br>" + data);
          };
        })(this)
      };
      if (data.source == null) {
        return console.log("no file!");
      }
      return (new ImageConverter(data)).process();
    };

    return ImageConvertFormView;

  })(Backbone.View);

}).call(this);
